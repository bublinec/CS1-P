1. Describe any complex data structures you used and explain why you think they are suitable.
2. How did you break down the problem into sub-problems? Explain the sub-problems and explain how they are organized in recommendations.py.

I.   READ DATA
    
    All the data are stored in files and it would be inefficient to work with files all the time.
    So the first step when we run the program is to read the data from files and store
    it in appropriate data structures in the memory.

    Data Structures:
    
        I decided to create a small database using dictionary for this problem. 
        The dictionary has two pairs (tables):

        books : list of tuples, where each book is represented as a tuple, 
                containning two strings: author, title. Author and the title 
                are two separate pieces of information about the book,
                therefore it is a good practice to keep it sepearete from begining

        ratings : dictionary with the pairs:  username : ratings 
                  ratings is also a dictionary with pairs (title : rating)

                  It is much clearer to keep ratings in a dictionary.
                  We also avoid redundacy in case the there are many books
                  and the user has red just few of them. 
                  Also we can take the advantage of quick lookup.

        NOTE:
        It would be more appropriate to choose more complex data structures
        if we were cosidering to add more features in the future.
        The best practice would be to represent each user and each book as an OBJECT.
        However, in our case with limited functionality, this is not necessary and it would only cause
        confusion (If we wanted to really create a usable app we would use a real database anyway).


II.  GET INPUT

    The second step is to actually find out the user's intentions - the input/command.
    First we ask for the username, and the number of recommendations required. 
    
    * This is handled by get_input function (operates through the command line interface).
    * Function print_input prints the comunication to the output file

    If the user is already in the database, we skipt the III. step and proceed to the step IV.


III. ADD USER

    In order to apply the similarity algorithm we first need to get the ratings
    from the new user and add it into the database and the ratings file. 

    * This is handled by add_user function.


IV.  CALCULATE SIMILARITY

    Calculate this similarity with each user, using the similarity algorithm
    and store it in a list.

    * This is handled by the function calculate_similarity.
    * This will also require the to import dot_product function.
    * Finally function print_similarity prints it into the console and outpur file.


V.   GET RECOMMENDATIONS

    Get the recommendations based on the similarity list.
    * This is handeld by get_rcm function.
    * Finally function print_rcm prints it into teh console and the output file.


Whole program is encapsuled in a recommendation function (procedure).




3. Are there any parts of your code that you think are difficult to understand? if yes, explain them here. 




4. Which possible errors could occur and how have you handled them? Explain whether you have used exception handling or defensive programming and use examples if you like.  